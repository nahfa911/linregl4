#independent variables matrix
X <- model.matrix(formula,data)
#dependent variable vector
y <- data[,all.vars(formula)[1]]
#finding Regressions_coeffcients
reg_coeffs <<- (solve(t(X) %*% X) %*% t(X)) %*% y
#finding fitted_values
fitted_values <<- X %*% reg_coeffs
#finding residuals
resids <<- (y - fitted_values)
#finding degree of freedom
n <- nrow(data)
p <- length(all.vars(formula))
df <<- n - p
#finding residual variance
resids_var <<- (t(resids) %*% resids) / df
#finding variance of the regression cofficients
reg_coef_var <<- as.numeric(resids_var) * solve(t(X) %*% X)
#finding t-values
t_values <<- reg_coeffs/as.numeric(sqrt(var(reg_coeffs)))
#findind p_values
p_values <<- pt(reg_coeffs,df)
#formula
formula <<- formula
#data
data <<- deparse(substitute(data))
}
,print = function(){
cat('call:\n')
cat(paste0('linreg(formula =',deparse(formula),' , data = ',data,')\n\n'))
cat('coefficients:\n')
cat('(intercept)')
for(i in 2:length(rownames(reg_coeffs))){
cat(sprintf("%20s",rownames(reg_coeffs)[i]))
}
cat('\n')
cat(round(reg_coeffs[,1][1],3))
for(i in 2:length(reg_coeffs[,1])){
cat(sprintf('%20s',as.character(round(reg_coeffs[,1][i]))))
}
}
,plot = function(){
plot_data <- data.frame(resids = resids, fitted_values = fitted_values
,scaled_residuals = sqrt(abs(resids)))
p1 <- ggplot2::ggplot(data = plot_data,mapping = ggplot2::aes(x = fitted_values,y = resids)) +
ggplot2::geom_point()+
ggplot2::geom_smooth(method = "loess", se=FALSE, color = "red")
p2 <- ggplot2::ggplot(data = plot_data,mapping = ggplot2::aes(x = fitted_values,y = scaled_residuals)) +
ggplot2::geom_point()+
ggplot2::geom_smooth(method = "loess", se=FALSE, color = "red")
plotly::subplot(p1,p2,nrows = 2, titleY = TRUE,shareX = TRUE)
}
,resid = function(){
return(as.vector(resids))
}
,pred = function(){
return(as.vector(fitted_values))
}
,coef = function(){
cat(round(t(reg_coeffs),3))
}
)
)
test2 <- linreg$new(formula,mtcars)
test2$coef()
linreg <- setRefClass('linreg'
,fields = list(  formula = 'formula'
, data = 'character'
, reg_coeffs = 'matrix'
, fitted_values = 'matrix'
, resids = 'matrix'
, df = "numeric"
, resids_var = "matrix"
, reg_coef_var = "matrix"
, t_values="matrix"
, p_values = "matrix"
)
,methods = list(
initialize = function(formula,data){
#independent variables matrix
X <- model.matrix(formula,data)
#dependent variable vector
y <- data[,all.vars(formula)[1]]
#finding Regressions_coeffcients
reg_coeffs <<- (solve(t(X) %*% X) %*% t(X)) %*% y
#finding fitted_values
fitted_values <<- X %*% reg_coeffs
#finding residuals
resids <<- (y - fitted_values)
#finding degree of freedom
n <- nrow(data)
p <- length(all.vars(formula))
df <<- n - p
#finding residual variance
resids_var <<- (t(resids) %*% resids) / df
#finding variance of the regression cofficients
reg_coef_var <<- as.numeric(resids_var) * solve(t(X) %*% X)
#finding t-values
t_values <<- reg_coeffs/as.numeric(sqrt(var(reg_coeffs)))
#findind p_values
p_values <<- pt(reg_coeffs,df)
#formula
formula <<- formula
#data
data <<- deparse(substitute(data))
}
,print = function(){
cat('call:\n')
cat(paste0('linreg(formula =',deparse(formula),' , data = ',data,')\n\n'))
cat('coefficients:\n')
cat('(intercept)')
for(i in 2:length(rownames(reg_coeffs))){
cat(sprintf("%20s",rownames(reg_coeffs)[i]))
}
cat('\n')
cat(round(reg_coeffs[,1][1],3))
for(i in 2:length(reg_coeffs[,1])){
cat(sprintf('%20s',as.character(round(reg_coeffs[,1][i]))))
}
}
,plot = function(){
plot_data <- data.frame(resids = resids, fitted_values = fitted_values
,scaled_residuals = sqrt(abs(resids)))
p1 <- ggplot2::ggplot(data = plot_data,mapping = ggplot2::aes(x = fitted_values,y = resids)) +
ggplot2::geom_point()+
ggplot2::geom_smooth(method = "loess", se=FALSE, color = "red")
p2 <- ggplot2::ggplot(data = plot_data,mapping = ggplot2::aes(x = fitted_values,y = scaled_residuals)) +
ggplot2::geom_point()+
ggplot2::geom_smooth(method = "loess", se=FALSE, color = "red")
plotly::subplot(p1,p2,nrows = 2, titleY = TRUE,shareX = TRUE)
}
,resid = function(){
return(as.vector(resids))
}
,pred = function(){
return(as.vector(fitted_values))
}
,coef = function(){
as.vector(round(t(reg_coeffs),3))
}
)
)
test2 <- linreg$new(formula,mtcars)
test2$coef()
test$coef()
linreg <- setRefClass('linreg'
,fields = list(  formula = 'formula'
, data = 'character'
, reg_coeffs = 'matrix'
, fitted_values = 'matrix'
, resids = 'matrix'
, df = "numeric"
, resids_var = "matrix"
, reg_coef_var = "matrix"
, t_values="matrix"
, p_values = "matrix"
)
,methods = list(
initialize = function(formula,data){
#independent variables matrix
X <- model.matrix(formula,data)
#dependent variable vector
y <- data[,all.vars(formula)[1]]
#finding Regressions_coeffcients
reg_coeffs <<- (solve(t(X) %*% X) %*% t(X)) %*% y
#finding fitted_values
fitted_values <<- X %*% reg_coeffs
#finding residuals
resids <<- (y - fitted_values)
#finding degree of freedom
n <- nrow(data)
p <- length(all.vars(formula))
df <<- n - p
#finding residual variance
resids_var <<- (t(resids) %*% resids) / df
#finding variance of the regression cofficients
reg_coef_var <<- as.numeric(resids_var) * solve(t(X) %*% X)
#finding t-values
t_values <<- reg_coeffs/as.numeric(sqrt(var(reg_coeffs)))
#findind p_values
p_values <<- pt(reg_coeffs,df)
#formula
formula <<- formula
#data
data <<- deparse(substitute(data))
}
,print = function(){
cat('call:\n')
cat(paste0('linreg(formula =',deparse(formula),' , data = ',data,')\n\n'))
cat('coefficients:\n')
cat('(intercept)')
for(i in 2:length(rownames(reg_coeffs))){
cat(sprintf("%20s",rownames(reg_coeffs)[i]))
}
cat('\n')
cat(round(reg_coeffs[,1][1],3))
for(i in 2:length(reg_coeffs[,1])){
cat(sprintf('%20s',as.character(round(reg_coeffs[,1][i]))))
}
}
,plot = function(){
plot_data <- data.frame(resids = resids, fitted_values = fitted_values
,scaled_residuals = sqrt(abs(resids)))
p1 <- ggplot2::ggplot(data = plot_data,mapping = ggplot2::aes(x = fitted_values,y = resids)) +
ggplot2::geom_point()+
ggplot2::geom_smooth(method = "loess", se=FALSE, color = "red")
p2 <- ggplot2::ggplot(data = plot_data,mapping = ggplot2::aes(x = fitted_values,y = scaled_residuals)) +
ggplot2::geom_point()+
ggplot2::geom_smooth(method = "loess", se=FALSE, color = "red")
plotly::subplot(p1,p2,nrows = 2, titleY = TRUE,shareX = TRUE)
}
,resid = function(){
return(as.vector(resids))
}
,pred = function(){
return(as.vector(fitted_values))
}
,coef = function(){
cat(rownames(reg_coeffs)[1])
for(i in 2:length(rownames(reg_coeffs))){
cat(sprintf("%20s",rownames(reg_coeffs)[i]))
}
cat('\n')
cat(round(reg_coeffs[,1][1],3))
for(i in 2:length(reg_coeffs[,1])){
cat(sprintf('%20s',as.character(round(length(reg_coeffs[,1]),3))))
}
}
)
)
test2 <- linreg$new(formula,mtcars)
test2$coef()
linreg <- setRefClass('linreg'
,fields = list(  formula = 'formula'
, data = 'character'
, reg_coeffs = 'matrix'
, fitted_values = 'matrix'
, resids = 'matrix'
, df = "numeric"
, resids_var = "matrix"
, reg_coef_var = "matrix"
, t_values="matrix"
, p_values = "matrix"
)
,methods = list(
initialize = function(formula,data){
#independent variables matrix
X <- model.matrix(formula,data)
#dependent variable vector
y <- data[,all.vars(formula)[1]]
#finding Regressions_coeffcients
reg_coeffs <<- (solve(t(X) %*% X) %*% t(X)) %*% y
#finding fitted_values
fitted_values <<- X %*% reg_coeffs
#finding residuals
resids <<- (y - fitted_values)
#finding degree of freedom
n <- nrow(data)
p <- length(all.vars(formula))
df <<- n - p
#finding residual variance
resids_var <<- (t(resids) %*% resids) / df
#finding variance of the regression cofficients
reg_coef_var <<- as.numeric(resids_var) * solve(t(X) %*% X)
#finding t-values
t_values <<- reg_coeffs/as.numeric(sqrt(var(reg_coeffs)))
#findind p_values
p_values <<- pt(reg_coeffs,df)
#formula
formula <<- formula
#data
data <<- deparse(substitute(data))
}
,print = function(){
cat('call:\n')
cat(paste0('linreg(formula =',deparse(formula),' , data = ',data,')\n\n'))
cat('coefficients:\n')
cat('(intercept)')
for(i in 2:length(rownames(reg_coeffs))){
cat(sprintf("%20s",rownames(reg_coeffs)[i]))
}
cat('\n')
cat(round(reg_coeffs[,1][1],3))
for(i in 2:length(reg_coeffs[,1])){
cat(sprintf('%20s',as.character(round(reg_coeffs[,1][i]))))
}
}
,plot = function(){
plot_data <- data.frame(resids = resids, fitted_values = fitted_values
,scaled_residuals = sqrt(abs(resids)))
p1 <- ggplot2::ggplot(data = plot_data,mapping = ggplot2::aes(x = fitted_values,y = resids)) +
ggplot2::geom_point()+
ggplot2::geom_smooth(method = "loess", se=FALSE, color = "red")
p2 <- ggplot2::ggplot(data = plot_data,mapping = ggplot2::aes(x = fitted_values,y = scaled_residuals)) +
ggplot2::geom_point()+
ggplot2::geom_smooth(method = "loess", se=FALSE, color = "red")
plotly::subplot(p1,p2,nrows = 2, titleY = TRUE,shareX = TRUE)
}
,resid = function(){
return(as.vector(resids))
}
,pred = function(){
return(as.vector(fitted_values))
}
,coef = function(){
cat(rownames(reg_coeffs)[1])
for(i in 2:length(rownames(reg_coeffs))){
cat(sprintf("%20s",rownames(reg_coeffs)[i]))
}
cat('\n')
cat(round(reg_coeffs[,1][1],3))
for(i in 2:length(reg_coeffs[,1])){
cat(sprintf('%20s',as.character(round(length(reg_coeffs[,1][i]),3))))
}
}
)
)
test2 <- linreg$new(formula,mtcars)
test2$coef()
X <- model.matrix(formula,data)
X <- model.matrix(formula,mtcars)
y <- mtcars[,all.vars(formula)[1]]
reg_coeffs <- (solve(t(X) %*% X) %*% t(X)) %*% y
reg_coeffs
reg_coeffs[,1]
linreg <- setRefClass('linreg'
,fields = list(  formula = 'formula'
, data = 'character'
, reg_coeffs = 'matrix'
, fitted_values = 'matrix'
, resids = 'matrix'
, df = "numeric"
, resids_var = "matrix"
, reg_coef_var = "matrix"
, t_values="matrix"
, p_values = "matrix"
)
,methods = list(
initialize = function(formula,data){
#independent variables matrix
X <- model.matrix(formula,data)
#dependent variable vector
y <- data[,all.vars(formula)[1]]
#finding Regressions_coeffcients
reg_coeffs <<- (solve(t(X) %*% X) %*% t(X)) %*% y
#finding fitted_values
fitted_values <<- X %*% reg_coeffs
#finding residuals
resids <<- (y - fitted_values)
#finding degree of freedom
n <- nrow(data)
p <- length(all.vars(formula))
df <<- n - p
#finding residual variance
resids_var <<- (t(resids) %*% resids) / df
#finding variance of the regression cofficients
reg_coef_var <<- as.numeric(resids_var) * solve(t(X) %*% X)
#finding t-values
t_values <<- reg_coeffs/as.numeric(sqrt(var(reg_coeffs)))
#findind p_values
p_values <<- pt(reg_coeffs,df)
#formula
formula <<- formula
#data
data <<- deparse(substitute(data))
}
,print = function(){
cat('call:\n')
cat(paste0('linreg(formula =',deparse(formula),' , data = ',data,')\n\n'))
cat('coefficients:\n')
cat('(intercept)')
for(i in 2:length(rownames(reg_coeffs))){
cat(sprintf("%20s",rownames(reg_coeffs)[i]))
}
cat('\n')
cat(round(reg_coeffs[,1][1],3))
for(i in 2:length(reg_coeffs[,1])){
cat(sprintf('%20s',as.character(round(reg_coeffs[,1][i]))))
}
}
,plot = function(){
plot_data <- data.frame(resids = resids, fitted_values = fitted_values
,scaled_residuals = sqrt(abs(resids)))
p1 <- ggplot2::ggplot(data = plot_data,mapping = ggplot2::aes(x = fitted_values,y = resids)) +
ggplot2::geom_point()+
ggplot2::geom_smooth(method = "loess", se=FALSE, color = "red")
p2 <- ggplot2::ggplot(data = plot_data,mapping = ggplot2::aes(x = fitted_values,y = scaled_residuals)) +
ggplot2::geom_point()+
ggplot2::geom_smooth(method = "loess", se=FALSE, color = "red")
plotly::subplot(p1,p2,nrows = 2, titleY = TRUE,shareX = TRUE)
}
,resid = function(){
return(as.vector(resids))
}
,pred = function(){
return(as.vector(fitted_values))
}
,coef = function(){
reg_coeffs[,1]
}
)
)
test2 <- linreg$new(formula,mtcars)
test2$coef()
linreg <- setRefClass('linreg'
,fields = list(  formula = 'formula'
, data = 'character'
, reg_coeffs = 'matrix'
, fitted_values = 'matrix'
, resids = 'matrix'
, df = "numeric"
, resids_var = "matrix"
, reg_coef_var = "matrix"
, t_values="matrix"
, p_values = "matrix"
)
,methods = list(
initialize = function(formula,data){
#independent variables matrix
X <- model.matrix(formula,data)
#dependent variable vector
y <- data[,all.vars(formula)[1]]
#finding Regressions_coeffcients
reg_coeffs <<- (solve(t(X) %*% X) %*% t(X)) %*% y
#finding fitted_values
fitted_values <<- X %*% reg_coeffs
#finding residuals
resids <<- (y - fitted_values)
#finding degree of freedom
n <- nrow(data)
p <- length(all.vars(formula))
df <<- n - p
#finding residual variance
resids_var <<- (t(resids) %*% resids) / df
#finding variance of the regression cofficients
reg_coef_var <<- as.numeric(resids_var) * solve(t(X) %*% X)
#finding t-values
t_values <<- reg_coeffs/as.numeric(sqrt(var(reg_coeffs)))
#findind p_values
p_values <<- pt(reg_coeffs,df)
#formula
formula <<- formula
#data
data <<- deparse(substitute(data))
}
,print = function(){
cat('call:\n')
cat(paste0('linreg(formula =',deparse(formula),' , data = ',data,')\n\n'))
cat('coefficients:\n')
cat('(intercept)')
for(i in 2:length(rownames(reg_coeffs))){
cat(sprintf("%20s",rownames(reg_coeffs)[i]))
}
cat('\n')
cat(round(reg_coeffs[,1][1],3))
for(i in 2:length(reg_coeffs[,1])){
cat(sprintf('%20s',as.character(round(reg_coeffs[,1][i]))))
}
}
,plot = function(){
plot_data <- data.frame(resids = resids, fitted_values = fitted_values
,scaled_residuals = sqrt(abs(resids)))
p1 <- ggplot2::ggplot(data = plot_data,mapping = ggplot2::aes(x = fitted_values,y = resids)) +
ggplot2::geom_point()+
ggplot2::geom_smooth(method = "loess", se=FALSE, color = "red")
p2 <- ggplot2::ggplot(data = plot_data,mapping = ggplot2::aes(x = fitted_values,y = scaled_residuals)) +
ggplot2::geom_point()+
ggplot2::geom_smooth(method = "loess", se=FALSE, color = "red")
plotly::subplot(p1,p2,nrows = 2, titleY = TRUE,shareX = TRUE)
}
,resid = function(){
return(as.vector(resids))
}
,pred = function(){
return(as.vector(fitted_values))
}
,coef = function(){
round(reg_coeffs[,1],3)
}
)
)
test2 <- linreg$new(formula,mtcars)
test2$coef()
test$summary()
test
test$summary()
mtcar <- mtcars
devtools::use_data(mtcar)
mtcar
11
library(linregl4)
?mtcar
LiUAdRLab4::linreg
a <- linreg$new(formula = Petal.Length ~ Species, data = iris)
a$plot()
a <- LiUAdRLab4::linreg$new(formula = Petal.Length ~ Species, data = iris4)
a$plot()
a$summary()
library("LiUAdRLab4", lib.loc="~/R/win-library/3.4")
remove.packages("LiUAdRLab4", lib="~/R/win-library/3.4")
devtools::install_github("shihs/LiUAdRLab4", build_vignettes = TRUE)
browseVignettes("LiUAdRLab4")
library("LiUAdRLab4", lib.loc="~/R/win-library/3.4")
remove.packages("LiUAdRLab4", lib="~/R/win-library/3.4")
devtools::install_github("shihs/LiUAdRLab4", build_vignettes = TRUE)
browseVignettes("LiUAdRLab4")
?linreg
library(LiUAdRLab4)
library(linregl4)
devtools::use_testthat()
library(linregl4)
library(linregl4)
